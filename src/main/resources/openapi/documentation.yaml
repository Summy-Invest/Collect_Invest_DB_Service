openapi: "3.0.3"
info:
  title: "Collect_Invest_DB_service API"
  description: "Collect_Invest_DB_service API"
  version: "1.0.0"
servers:
- url: "https://Collect_Invest_DB_service"
paths:
  /collectableService/collectable/getAllCollectibles:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CollectablesEntity"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Error while getting collectables"
  /collectableService/collectable/getCollectableById/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CollectablesEntity"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Error while getting collectable 3"
                Example#2:
                  value: "Error while getting collectable 2"
                Example#3:
                  value: "Error while getting collectable 1"
  /financialService/transaction/createTransaction:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/TransactionsEntity"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Error while creating transaction"
  /financialService/transaction/updateStatus:
    patch:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/TransactionsEntity"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "Error while updating status"
  /financialService/wallet/getWallet/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WalletsEntity"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Error while getting wallet"
                Example#2:
                  value: "Error while getting wallet"
                Example#3:
                  value: "Error while getting wallet"
  /financialService/wallet/topUpBalance/{id}/{amount}:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      - name: "amount"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "Error while changing balance id is null"
  /financialService/wallet/updateStatus/{id}:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "Error while changing wallet status"
                Example#2:
                  value: "Error while changing wallet status"
  /financialService/wallet/withdrawBalance/{id}/{amount}:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      - name: "amount"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Error while withdraw balance adfartewr"
                Example#2:
                  value: "Error while withdraw balance id is null"
  /userService/user/authenticateUser/{email}/{password}:
    get:
      description: ""
      parameters:
      - name: "email"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "password"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid email or password"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Error while processing request"
  /userService/user/saveUser:
    post:
      description: "Обработка запроса на добавление юзера"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/UsersEntity"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
components:
  schemas:
    CollectablesEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        category:
          type: "string"
        photoLink:
          type: "string"
        currentPrice:
          type: "number"
          format: "double"
        availableShares:
          type: "integer"
          format: "int32"
    TransactionsEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        amount:
          type: "integer"
          format: "int32"
        status:
          type: "string"
        walletId:
          type: "integer"
          format: "int64"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"
    WalletsEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        balance:
          type: "integer"
          format: "int32"
        status:
          type: "string"
    UsersEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"